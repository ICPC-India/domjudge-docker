## Here’s the **detailed and comprehensive step-by-step guide** for setting up your entire AWS environment with **ELB**, **DOMserver**, **RDS (MariaDB)**, **Jump Host**, and **Judgehost**, while skipping Network ACLs as requested.

---

### **1. Create a VPC:**

1. **Go to the VPC Dashboard** and create a new VPC:
   - **Name:** `DOMjudge-VPC`
   - **CIDR Block:** `10.0.0.0/16`

---

### **2. Create Subnets:**

1. **Public Subnet** (for ELB and Jump Host):
   - Create a **Public Subnet** with **Auto-assign Public IPv4** enabled:
     - **Name:** `Public-Subnet`
     - **CIDR Block:** `10.0.1.0/24`

2. **Private Subnets** (for DOMserver, Judgehost, and RDS):
   - Create two **Private Subnets**:
     - **DOMserver Private Subnet:** `10.0.2.0/24`
     - **Judgehost Private Subnet:** `10.0.4.0/24`
     - **RDS Private Subnet:** `10.0.3.0/24`
   - Ensure **Auto-assign Public IP** is disabled for all private subnets.

---

### **3. Configure Route Tables:**

1. **Public Subnet Route Table:**
   - Create a **Route Table** for the **Public Subnet**:
     - **Route:** `0.0.0.0/0`
     - **Target:** **Internet Gateway (IGW)**
   - Associate this route table with the **Public Subnet (10.0.1.0/24)**.

2. **Private Subnet Route Table:**
   - Create a **Private Subnet Route Table** for the **DOMserver**, **Judgehost**, and **RDS**.
   - If the **DOMserver** and **Judgehost** need internet access for updates, create a **NAT Gateway** in the **Public Subnet**:
     - **Route:** `0.0.0.0/0`
     - **Target:** **NAT Gateway**
   - Associate the **Private Subnets (DOMserver, Judgehost, RDS)** with this route table.

---

### **4. Create and Attach an Internet Gateway:**

1. **Go to VPC > Internet Gateways**, create an **Internet Gateway** and attach it to your VPC.
2. Associate the **Public Subnet Route Table** with this **Internet Gateway**.

---

### **5. Create and Launch an RDS (MariaDB):**

1. Go to **RDS Dashboard** and **Create Database**:
   - **Engine:** MariaDB.
   - Choose the **DOMjudge-VPC** and place the RDS instance in the **RDS Private Subnet (10.0.3.0/24)**.
2. Ensure the RDS security group allows inbound traffic from the **DOMserver** on **port 3306** (MySQL).
3. **DB Subnet Group**: Select at least two private subnets for high availability (e.g., `10.0.3.0/24`).

---

### **6. Launch EC2 Instances for DOMserver and Judgehost:**

1. **DOMserver:**
   - Launch an EC2 instance in the **DOMserver Private Subnet (10.0.2.0/24)**.
   - Assign a security group that allows:
     - **Inbound Traffic** on **port 80 (HTTP)** from the **ELB Security Group**.
     - **Outbound Traffic** to **RDS (port 3306)**.

2. **Judgehost:**
   - Launch a separate EC2 instance for **Judgehost** in the **Judgehost Private Subnet (10.0.4.0/24)**.
   - Configure its security group to allow **inbound traffic from the DOMserver** for processing jobs (typically HTTP).

---

### **7. Set Up the Jump Host (Bastion Host):**

1. **Launch an EC2 instance** in the **Public Subnet (10.0.1.0/24)** and assign a public IP.
2. Attach a security group to the Jump Host that allows **SSH access (port 22)** from your local machine’s IP.
3. **Configure SSH access**:
   - Connect to the Jump Host, and from there, SSH into the **DOMserver** and **Judgehost** instances using their private IPs:
     ```bash
     ssh -i your-key.pem ec2-user@<domserver-private-ip>
     ```

---

### **8. Set Up Elastic Load Balancer (ELB):**

1. Go to **EC2 > Load Balancers** and create an **Application Load Balancer**:
   - **Type:** Application Load Balancer (ALB).
   - **Subnets:** Assign the **Public Subnet (10.0.1.0/24)**.
   - **Listeners**:
     - Create a listener for **HTTP (port 80)** to forward traffic to the **DOMserver**.

2. **Target Group**:
   - Create a **Target Group** that routes traffic to the **DOMserver**.
   - Set the **Health Check Path** to `/` or `/public` for testing.
   - Ensure the DOMserver is marked **healthy**.

---

### **9. Configure Security Groups:**

1. **ELB Security Group**:
   - Allow **inbound traffic on port 80 (HTTP)** from `0.0.0.0/0`.
   - Allow **outbound traffic** to the **DOMserver’s private IP** on **port 80**.

2. **DOMserver Security Group**:
   - Allow **inbound traffic on port 80 (HTTP)** from the **ELB Security Group**.
   - Allow **outbound traffic to RDS** on **port 3306**.

3. **Judgehost Security Group**:
   - Allow **inbound traffic from DOMserver** on required ports for processing jobs (such as HTTP).
   - Ensure **outbound traffic** is permitted as needed.

---

### **10. Install Software and Configure DOMjudge:**

1. **Install MariaDB client** on the DOMserver to connect to the RDS instance.
2. Run the necessary SQL commands on the RDS to create the database and user for DOMjudge:
   ```bash
   mysql -h <rds-endpoint> -u root -p'your-password' -e "
   CREATE DATABASE IF NOT EXISTS domjudge;
   CREATE USER IF NOT EXISTS 'domjudge'@'%' IDENTIFIED BY 'djpw';
   GRANT ALL PRIVILEGES ON domjudge.* TO 'domjudge'@'%';
   FLUSH PRIVILEGES;"
   ```

3. **Start DOMjudge** on the DOMserver and configure it to connect to the RDS instance.

4. **Judgehost Setup**:
   - Install and configure the **Judgehost** to communicate with the DOMserver for handling submissions.

---

### **11. Verify Setup and Test:**

1. **Verify ELB Setup**:
   - Test the **ELB DNS name** in your browser:
     ```
     http://<elb-dns-name>/public
     ```

2. **DNS Configuration**:
   - Set the **A record** of `test2.indiaicpc.in` to point to the **ELB DNS name**.
   - Test access via the domain `test2.indiaicpc.in`.

---

### **Summary of Components:**

1. **VPC with public and private subnets**.
2. **RDS (MariaDB)** in the private subnet with inbound access from DOMserver.
3. **EC2 instances**:
   - **DOMserver** in a private subnet, accessible via ELB.
   - **Judgehost** in its own private subnet.
   - **Jump Host** (Bastion) in the public subnet for SSH access to private instances.
4. **ELB** routing traffic to the DOMserver.
5. **DNS Configuration** pointing to the ELB.

---

This guide provides a **detailed breakdown** of the entire setup, including setting up the **Jump Host** for secure SSH access to private subnets and incorporating a **Judgehost**. Let me know if you need any further details or adjustments!